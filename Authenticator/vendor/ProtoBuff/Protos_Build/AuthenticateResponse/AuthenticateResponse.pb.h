// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuthenticateResponse.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AuthenticateResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AuthenticateResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AuthenticateResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AuthenticateResponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AuthenticateResponse_2eproto;
namespace Database {
class AuthenticateResponse;
struct AuthenticateResponseDefaultTypeInternal;
extern AuthenticateResponseDefaultTypeInternal _AuthenticateResponse_default_instance_;
}  // namespace Database
PROTOBUF_NAMESPACE_OPEN
template<> ::Database::AuthenticateResponse* Arena::CreateMaybeMessage<::Database::AuthenticateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Database {

enum AuthenticateResponse_FailReason : int {
  AuthenticateResponse_FailReason_NONE = 0,
  AuthenticateResponse_FailReason_INVALID_CREDENTIALS = 1,
  AuthenticateResponse_FailReason_INTERNAL_SERVER_ERROR = 2
};
bool AuthenticateResponse_FailReason_IsValid(int value);
constexpr AuthenticateResponse_FailReason AuthenticateResponse_FailReason_FailReason_MIN = AuthenticateResponse_FailReason_NONE;
constexpr AuthenticateResponse_FailReason AuthenticateResponse_FailReason_FailReason_MAX = AuthenticateResponse_FailReason_INTERNAL_SERVER_ERROR;
constexpr int AuthenticateResponse_FailReason_FailReason_ARRAYSIZE = AuthenticateResponse_FailReason_FailReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AuthenticateResponse_FailReason_descriptor();
template<typename T>
inline const std::string& AuthenticateResponse_FailReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AuthenticateResponse_FailReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AuthenticateResponse_FailReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AuthenticateResponse_FailReason_descriptor(), enum_t_value);
}
inline bool AuthenticateResponse_FailReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AuthenticateResponse_FailReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AuthenticateResponse_FailReason>(
    AuthenticateResponse_FailReason_descriptor(), name, value);
}
// ===================================================================

class AuthenticateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Database.AuthenticateResponse) */ {
 public:
  inline AuthenticateResponse() : AuthenticateResponse(nullptr) {}
  ~AuthenticateResponse() override;
  explicit constexpr AuthenticateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticateResponse(const AuthenticateResponse& from);
  AuthenticateResponse(AuthenticateResponse&& from) noexcept
    : AuthenticateResponse() {
    *this = ::std::move(from);
  }

  inline AuthenticateResponse& operator=(const AuthenticateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateResponse& operator=(AuthenticateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticateResponse* internal_default_instance() {
    return reinterpret_cast<const AuthenticateResponse*>(
               &_AuthenticateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthenticateResponse& a, AuthenticateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateResponse* New() const final {
    return new AuthenticateResponse();
  }

  AuthenticateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AuthenticateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Database.AuthenticateResponse";
  }
  protected:
  explicit AuthenticateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AuthenticateResponse_FailReason FailReason;
  static constexpr FailReason NONE =
    AuthenticateResponse_FailReason_NONE;
  static constexpr FailReason INVALID_CREDENTIALS =
    AuthenticateResponse_FailReason_INVALID_CREDENTIALS;
  static constexpr FailReason INTERNAL_SERVER_ERROR =
    AuthenticateResponse_FailReason_INTERNAL_SERVER_ERROR;
  static inline bool FailReason_IsValid(int value) {
    return AuthenticateResponse_FailReason_IsValid(value);
  }
  static constexpr FailReason FailReason_MIN =
    AuthenticateResponse_FailReason_FailReason_MIN;
  static constexpr FailReason FailReason_MAX =
    AuthenticateResponse_FailReason_FailReason_MAX;
  static constexpr int FailReason_ARRAYSIZE =
    AuthenticateResponse_FailReason_FailReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FailReason_descriptor() {
    return AuthenticateResponse_FailReason_descriptor();
  }
  template<typename T>
  static inline const std::string& FailReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FailReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FailReason_Name.");
    return AuthenticateResponse_FailReason_Name(enum_t_value);
  }
  static inline bool FailReason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FailReason* value) {
    return AuthenticateResponse_FailReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCreationDateFieldNumber = 3,
    kRequestIDFieldNumber = 1,
    kUserIDFieldNumber = 2,
    kSuccessFieldNumber = 4,
    kFailReasonFieldNumber = 5,
  };
  // optional string creationDate = 3;
  bool has_creationdate() const;
  private:
  bool _internal_has_creationdate() const;
  public:
  void clear_creationdate();
  const std::string& creationdate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creationdate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creationdate();
  PROTOBUF_MUST_USE_RESULT std::string* release_creationdate();
  void set_allocated_creationdate(std::string* creationdate);
  private:
  const std::string& _internal_creationdate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creationdate(const std::string& value);
  std::string* _internal_mutable_creationdate();
  public:

  // required int32 requestID = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 userID = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool success = 4;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // required .Database.AuthenticateResponse.FailReason failReason = 5;
  bool has_failreason() const;
  private:
  bool _internal_has_failreason() const;
  public:
  void clear_failreason();
  ::Database::AuthenticateResponse_FailReason failreason() const;
  void set_failreason(::Database::AuthenticateResponse_FailReason value);
  private:
  ::Database::AuthenticateResponse_FailReason _internal_failreason() const;
  void _internal_set_failreason(::Database::AuthenticateResponse_FailReason value);
  public:

  // @@protoc_insertion_point(class_scope:Database.AuthenticateResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationdate_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  bool success_;
  int failreason_;
  friend struct ::TableStruct_AuthenticateResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthenticateResponse

// required int32 requestID = 1;
inline bool AuthenticateResponse::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthenticateResponse::has_requestid() const {
  return _internal_has_requestid();
}
inline void AuthenticateResponse::clear_requestid() {
  requestid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateResponse::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateResponse::requestid() const {
  // @@protoc_insertion_point(field_get:Database.AuthenticateResponse.requestID)
  return _internal_requestid();
}
inline void AuthenticateResponse::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  requestid_ = value;
}
inline void AuthenticateResponse::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:Database.AuthenticateResponse.requestID)
}

// optional int32 userID = 2;
inline bool AuthenticateResponse::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AuthenticateResponse::has_userid() const {
  return _internal_has_userid();
}
inline void AuthenticateResponse::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateResponse::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateResponse::userid() const {
  // @@protoc_insertion_point(field_get:Database.AuthenticateResponse.userID)
  return _internal_userid();
}
inline void AuthenticateResponse::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  userid_ = value;
}
inline void AuthenticateResponse::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:Database.AuthenticateResponse.userID)
}

// optional string creationDate = 3;
inline bool AuthenticateResponse::_internal_has_creationdate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthenticateResponse::has_creationdate() const {
  return _internal_has_creationdate();
}
inline void AuthenticateResponse::clear_creationdate() {
  creationdate_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticateResponse::creationdate() const {
  // @@protoc_insertion_point(field_get:Database.AuthenticateResponse.creationDate)
  return _internal_creationdate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthenticateResponse::set_creationdate(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Database.AuthenticateResponse.creationDate)
}
inline std::string* AuthenticateResponse::mutable_creationdate() {
  std::string* _s = _internal_mutable_creationdate();
  // @@protoc_insertion_point(field_mutable:Database.AuthenticateResponse.creationDate)
  return _s;
}
inline const std::string& AuthenticateResponse::_internal_creationdate() const {
  return creationdate_.Get();
}
inline void AuthenticateResponse::_internal_set_creationdate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  creationdate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AuthenticateResponse::_internal_mutable_creationdate() {
  _has_bits_[0] |= 0x00000001u;
  return creationdate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AuthenticateResponse::release_creationdate() {
  // @@protoc_insertion_point(field_release:Database.AuthenticateResponse.creationDate)
  if (!_internal_has_creationdate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return creationdate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AuthenticateResponse::set_allocated_creationdate(std::string* creationdate) {
  if (creationdate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  creationdate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creationdate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Database.AuthenticateResponse.creationDate)
}

// required bool success = 4;
inline bool AuthenticateResponse::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AuthenticateResponse::has_success() const {
  return _internal_has_success();
}
inline void AuthenticateResponse::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool AuthenticateResponse::_internal_success() const {
  return success_;
}
inline bool AuthenticateResponse::success() const {
  // @@protoc_insertion_point(field_get:Database.AuthenticateResponse.success)
  return _internal_success();
}
inline void AuthenticateResponse::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000008u;
  success_ = value;
}
inline void AuthenticateResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Database.AuthenticateResponse.success)
}

// required .Database.AuthenticateResponse.FailReason failReason = 5;
inline bool AuthenticateResponse::_internal_has_failreason() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AuthenticateResponse::has_failreason() const {
  return _internal_has_failreason();
}
inline void AuthenticateResponse::clear_failreason() {
  failreason_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::Database::AuthenticateResponse_FailReason AuthenticateResponse::_internal_failreason() const {
  return static_cast< ::Database::AuthenticateResponse_FailReason >(failreason_);
}
inline ::Database::AuthenticateResponse_FailReason AuthenticateResponse::failreason() const {
  // @@protoc_insertion_point(field_get:Database.AuthenticateResponse.failReason)
  return _internal_failreason();
}
inline void AuthenticateResponse::_internal_set_failreason(::Database::AuthenticateResponse_FailReason value) {
  assert(::Database::AuthenticateResponse_FailReason_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  failreason_ = value;
}
inline void AuthenticateResponse::set_failreason(::Database::AuthenticateResponse_FailReason value) {
  _internal_set_failreason(value);
  // @@protoc_insertion_point(field_set:Database.AuthenticateResponse.failReason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Database

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Database::AuthenticateResponse_FailReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Database::AuthenticateResponse_FailReason>() {
  return ::Database::AuthenticateResponse_FailReason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AuthenticateResponse_2eproto
